{"version":3,"sources":["serviceWorker.js","bug-tracker/reducers/index.js","spinner/reducers/index.js","filter/reducers.js","store/middlewares/promiseMiddleware.js","store/middlewares/asyncMiddleware.js","store/middlewares/loggerMiddleware.js","store/index.js","bug-tracker/views/BugStats.js","bug-tracker/views/BugItem.js","bug-tracker/views/BugList.js","bug-tracker/views/BugEdit.js","bug-tracker/views/BugSort.js","bug-tracker/services/bugApi.js","bug-tracker/actions/addNew.js","bug-tracker/actions/load.js","bug-tracker/actions/index.js","bug-tracker/actions/toggle.js","bug-tracker/actions/removeClosed.js","bug-tracker/index.js","spinner/actions/index.js","filter/actions.js","spinner/index.js","index.js"],"names":["Boolean","window","location","hostname","match","bugsReducer","currentState","action","type","newState","payload","updatedBug","map","bug","id","bugsToRemove","filter","indexOf","bugToRemove","spinnerReducer","filterReducer","promiseMiddleware","store","next","promiseAction","Promise","then","asyncMiddleware","dispatch","getState","loggerMiddleware","console","group","log","groupEnd","rootReducer","combineReducers","spinnerState","bugsState","filterState","appStore","createStore","applyMiddleware","BugStats","bugs","closedCount","reduce","result","isClosed","className","length","BugItem","toggle","onClick","name","createdAt","toString","BugList","removeClosed","bugItems","key","value","BugEdit","addNew","React","useState","newBugName","setNewBugName","htmlFor","onChange","evt","target","BugSort","serviceEndPoint","getAllBugs","axios","get","response","data","save","bugData","post","put","remove","delete","bugName","newBugData","Date","bugApi","newBug","load","bugToToggle","toggledBugData","toggledBug","forEach","closedBug","_","BugTracker","render","props","Component","connect","storeState","bindActionCreators","bugActionCreators","spinnerActionCreators","up","delta","down","filterActionCreators","applyFilter","toApply","spinnerActionDispatchers","filterActionDispatchers","setDelta","valueAsNumber","checked","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f4cfdbb9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","function bugsReducer(currentState = [], action) {\n    if (action.type === 'ADD_NEW_BUG') {\n        const newState = [...currentState, action.payload];\n        return newState;\n    }\n    if (action.type === 'UPDATE_BUG') {\n        const updatedBug = action.payload;\n        const newState = currentState.map(bug => bug.id === updatedBug.id ? updatedBug : bug);\n        return newState;\n    }\n    if (action.type === 'REMOVE_BUGS') {\n        const bugsToRemove = action.payload;\n        const newState = currentState.filter(bug => bugsToRemove.indexOf(bug) === -1);\n        return newState;\n    }\n    if (action.type === 'REMOVE_BUG') {\n        const bugToRemove = action.payload;\n        const newState = currentState.filter(bug => bugToRemove.id !== bug.id);\n        return newState;\n    }\n    if (action.type === 'LOAD_BUGS'){\n        return action.payload;\n    }\n    return currentState;\n}\nexport default bugsReducer;","function spinnerReducer(currentState = 0, action) {\n    if (action.type === 'UP') return currentState + action.payload;\n    if (action.type === 'DOWN') return currentState - action.payload;\n    return currentState;\n}\n\nexport default spinnerReducer;","function filterReducer(currentState = false, action){\n    if (action.type === 'APPLY_FILTER'){\n        return action.payload;\n    }\n    return currentState;\n}\n\nexport default filterReducer;","const promiseMiddleware = store => next => promiseAction => {\n    if (promiseAction instanceof Promise) {\n        promiseAction\n            .then(action => next(action));\n    } else {\n        return next(promiseAction);\n    }\n}\n\nexport default promiseMiddleware;","const asyncMiddleware = store => next => action => {\n    if (typeof action === 'function') {\n        return action(store.dispatch, store.getState);\n    } else {\n        return next(action);\n    }\n}\n\nexport default asyncMiddleware;","function loggerMiddleware(store) {\n    return function (next) {\n        return function (action) {\n            console.group(action.type);\n            console.log(action);\n            console.group('BEFORE');\n            console.log(store.getState());\n            console.groupEnd();\n            next(action);\n            console.group('AFTER');\n            console.log(store.getState());\n            console.groupEnd();\n            console.groupEnd();\n        }\n    }\n}\n\nexport default loggerMiddleware;","import { createStore, combineReducers, applyMiddleware } from 'redux';\n\nimport bugsReducer from '../bug-tracker/reducers';\nimport spinnerReducer from '../spinner/reducers';\nimport filterReducer from '../filter/reducers';\n\nimport promiseMiddleware from './middlewares/promiseMiddleware';\nimport asyncMiddleware from './middlewares/asyncMiddleware';\nimport loggerMiddleware from './middlewares/loggerMiddleware';\n\nconst rootReducer = combineReducers({\n    spinnerState: spinnerReducer,\n    bugsState: bugsReducer,\n    filterState : filterReducer\n});\n\nconst appStore = createStore(rootReducer, applyMiddleware(loggerMiddleware, asyncMiddleware, promiseMiddleware));\n\nexport default appStore;","import React from 'react';\n\nconst BugStats = ({ bugs }) => {\n    const closedCount = bugs.reduce((result, bug) => bug.isClosed ? ++result : result, 0);\n    return (\n        <section className=\"stats\">\n            <span className=\"closed\">{closedCount}</span>\n            <span> / </span>\n            <span>{bugs.length}</span>\n        </section>\n    );\n};\n\nexport default BugStats;","import React from 'react';\n\nconst BugItem = ({ bug, toggle }) => (\n    <li>\n        <span\n            className={'bugname ' + (bug.isClosed ? 'closed' : '')}\n            onClick={() => toggle(bug)}\n        >{bug.name}</span>\n        <div className=\"datetime\">{bug.createdAt.toString()}</div>\n        <div> [ {bug.id} ] </div>\n    </li>\n);\n\nexport default BugItem;","import React from 'react';\nimport BugItem from './BugItem';\n\n/* \nimport bugActionCreators from '../actions';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\n*/\n\nconst BugList = ({ bugs, toggle, removeClosed }) => {\n    const bugItems = bugs.map(bug => (\n        <BugItem key={bug.id} {...{ bug, toggle }} />\n    ));\n    return (\n        <section className=\"list\">\n            <ol>\n                {bugItems}\n            </ol>\n            <input type=\"button\" value=\"Remove Closed\" onClick={() => removeClosed()} />\n        </section>\n    )\n}\n\n/* function mapStateToProps(storeState){\n    return { bugs : storeState.bugsState.filter(bug => bug.id % 2 === storeState.spinnerState % 2) };\n}\n\nfunction mapDispatchToProps(dispatch){\n    const { toggle, removeClosed} = bindActionCreators(bugActionCreators, dispatch);\n    return { toggle, removeClosed };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BugList); */\n\nexport default BugList;","import React from 'react';\n\nconst BugEdit = ({ addNew }) => {\n    const [newBugName, setNewBugName] = React.useState('');\n    return (\n        <section className=\"edit\">\n            <label htmlFor=\"\">Bug Name :</label>\n            <input type=\"text\"\n                value={newBugName}\n                onChange={evt => setNewBugName(evt.target.value)} />\n            <input type=\"button\" value=\"Add New\" onClick={() => addNew(newBugName)} />\n        </section>\n    )\n}\n\nexport default BugEdit;\n","import React from 'react';\n\nconst BugSort = () => (\n    <section className=\"sort\">\n        <label htmlFor=\"\">Order By :</label>\n        <select>\n            <option value=\"\"></option>\n            <option value=\"\"></option>\n        </select>\n        <label htmlFor=\"\">Descending ? :</label>\n        <input type=\"checkbox\" />\n    </section>\n);\n\nexport default BugSort;","import axios from 'axios';\n\nconst serviceEndPoint = 'http://localhost:3030/bugs';\n\nfunction getAllBugs(){\n    return axios\n        .get(serviceEndPoint)\n        .then(response => response.data);\n}\n\nfunction save(bugData){\n    if (bugData.id === 0){\n        return axios\n            .post(serviceEndPoint, bugData)\n            .then(response => response.data);\n    } else {\n        return axios\n            .put(`${serviceEndPoint}/${bugData.id}`, bugData)\n            .then(response => response.data);  \n    }\n}\nfunction remove(bugData){\n    return axios\n        .delete(`${serviceEndPoint}/${bugData.id}`)\n        .then(response => response.data);  \n}\n\nexport default { getAllBugs, save, remove };","import bugApi from '../services/bugApi';\n\nfunction addNew(bugName){\n    const newBugData = {\n        id: 0,\n        name: bugName,\n        isClosed: false,\n        createdAt: new Date()\n    };\n    return bugApi\n        .save(newBugData)\n        .then(newBug => {\n            const action = { type: 'ADD_NEW_BUG', payload: newBug };\n            return action;\n        });\n    \n}\nexport default addNew;","import bugApi from '../services/bugApi';\n\nfunction load(){\n    return function(dispatch){\n        bugApi\n            .getAllBugs()\n            .then(function(bugs){\n                const action = { type: 'LOAD_BUGS', payload: bugs };\n                dispatch(action);\n            });\n    }\n}\n\nexport default load;","import addNew from './addNew';\nimport toggle from './toggle';\nimport removeClosed from './removeClosed';\nimport load from './load';\n\nexport default { addNew, toggle, removeClosed, load };","import bugApi from '../services/bugApi';\n\nfunction toggle(bugToToggle) {\n    return function(dispatch){\n        const toggledBugData = { ...bugToToggle, isClosed: !bugToToggle.isClosed };\n        bugApi\n            .save(toggledBugData)\n            .then(toggledBug => {\n                const action = { type: 'UPDATE_BUG', payload: toggledBug };\n                dispatch(action);\n            });\n        \n    }\n}\nexport default toggle;","import bugApi from '../services/bugApi';\n\nfunction removeClosed() {\n    return function(dispatch, getState){\n        const bugs = getState().bugsState;\n        const bugsToRemove = bugs.filter(bug => bug.isClosed);\n        bugsToRemove\n            .forEach(closedBug => {\n                bugApi\n                    .remove(closedBug)\n                    .then(_ => {\n                        const action = { type: 'REMOVE_BUG', payload: closedBug };\n                        dispatch(action);\n                    })\n            })\n    };\n    \n}\nexport default removeClosed;","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport BugStats from './views/BugStats';\nimport BugList from './views/BugList';\nimport BugEdit from './views/BugEdit';\nimport BugSort from './views/BugSort';\n\nimport bugActionCreators from './actions';\n\nclass BugTracker extends Component {\n    render = () => {\n        const { bugs, addNew, toggle, removeClosed, load } = this.props;\n        return (\n            <Fragment>\n                <BugStats bugs={bugs} />\n                <hr/>\n                <input type=\"button\" value= 'LOAD BUGS' onClick={load} />\n                <hr/>\n                <BugSort />\n                <BugEdit addNew={addNew} />\n                <BugList {...{ bugs, toggle, removeClosed }} />\n                {/* <BugList /> */}\n            </Fragment>\n        )\n    }\n}\n\n//extracting data\nfunction mapStateToProps(storeState){\n    const { bugsState : bugs, filterState, spinnerState } = storeState;\n    if (filterState){\n        return { bugs : bugs.filter(bug => bug.id % 2 === spinnerState % 2)}\n    } else {\n        return { bugs : bugs };\n    }\n}\n\n//using dispatch for the component\nfunction mapDispatchToProps(dispatch){\n    const bugActionDispatchers = bindActionCreators(bugActionCreators, dispatch);\n    return bugActionDispatchers;\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BugTracker);","const spinnerActionCreators = {\n    up(delta) {\n        const action = { type: 'UP', payload: delta };\n        return action;\n    },\n    down(delta) {\n        const action = { type: 'DOWN', payload: delta };\n        return action;\n    }\n}\n\nexport default spinnerActionCreators;","var filterActionCreators = {\n    applyFilter(toApply){\n        const action = { type : 'APPLY_FILTER', payload : toApply};\n        return action;\n    }\n}\n\nexport default filterActionCreators;","import React, { useState } from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport spinnerActionCreators from './actions';\nimport filterActionCreators from '../filter/actions';\n\nconst Spinner = ({ value, up, down, applyFilter }) => {\n    let [delta, setDelta] = useState(0);\n    return (\n        <div>\n            <label>Delta : </label>\n            <input type=\"number\" value={delta} onChange={evt => setDelta(evt.target.valueAsNumber || 0)} />\n            <br />\n            <input type=\"button\" value=\"Down\" onClick={() => down(delta)} />\n            <span> [ {value} ] </span>\n            <input type=\"button\" value=\"Up\" onClick={() => up(delta)} />\n            <hr/>\n            <div>\n                <label>Apply Filter : </label>\n                <input type=\"checkbox\" onChange={ evt => applyFilter(evt.target.checked)} />\n            </div>\n        </div>\n    );\n};\n\nfunction mapStateToProps(storeState){\n    const value = storeState.spinnerState;\n    return { value : value };\n}\n\nfunction mapDispatchToProps(dispatch){\n    const spinnerActionDispatchers = bindActionCreators(spinnerActionCreators, dispatch);\n    const filterActionDispatchers = bindActionCreators(filterActionCreators, dispatch);\n    return { ...spinnerActionDispatchers, ...filterActionDispatchers };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Spinner);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\n\nimport appStore from './store';\nimport BugTracker from './bug-tracker';\nimport Spinner from './spinner';\n\nimport axios from 'axios';\nwindow['axios'] = axios;\n\nReactDOM.render(\n    <Provider store={appStore}>\n        <div>\n            <Spinner />\n            <br/>\n            <BugTracker/>\n        </div>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}